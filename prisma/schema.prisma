generator client {
  provider = "prisma-client-js"
}

datasource db {
  //Local database
  provider = "cockroachdb"

  // provider = "cockroachdb"
  url = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  displayName String?
  bio         String?
  phone       String?
  username    String?
  college     String? @default("N.M.A.M. Institute of Technology")
  usn         String?
  lightTheme  String?
  darkTheme   String?
  role        String? @default("user")
  links       Links?
  organizers  Event[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Core      Core[]
  Team      Team[]

  placement Placement?
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Core {
  id    String  @id @default(cuid())
  year  String
  post  String
  image String
  quote String?
  User  User    @relation(fields: [userId], references: [id])

  order  Int
  userId String
}

model Faculty {
  id String @id @default(cuid())

  name         String
  email        String
  designation  String
  designation2 String?
  image        String
  about        String[]

  order     Int     @unique
  published Boolean @default(false)

  @@index([name], name: "name_index")
}

model Event {
  id String @id @default(cuid())

  title        String
  description  String?
  image        String
  date         DateTime
  time         String?
  reportLink   String?
  venue        String?
  category     String
  participants Team[]
  winners      Winners[]
  organizers   User[]
  guests       String[]
  published    Boolean   @default(false)
}

model Links {
  id String @id @default(cuid())

  instagram String?
  twitter   String?
  linkedin  String?
  github    String?
  custom    Json?
  order     String[]

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model Team {
  id String @id @default(cuid())

  user     User[]
  event    Event     @relation(fields: [eventId], references: [id])
  winner   Winners[]
  attended Boolean   @default(false)

  eventId String
}

model Winners {
  id String @id @default(cuid())

  position Int
  teamId   String
  eventId  String

  event Event @relation(fields: [eventId], references: [id])
  team  Team  @relation(fields: [teamId], references: [id])
}

model Placement {
  id String @id @default(cuid())

  name      User      @relation(fields: [userId], references: [id])
  userId    String    @unique
  companies Company[]
  offers    Offer[]
  order     Int       @unique

  yearId String @unique
  year   Year   @relation("PlacementYear", fields: [yearId], references: [id])
}

model Company {
  id String @id @default(cuid())

  companyName String
  offers      Offer[]
  yearId      String  @unique
  year        Year    @relation("CompanyYear", fields: [yearId], references: [id])

  placementId String
  placement   Placement @relation(fields: [placementId], references: [id])
}

model Offer {
  id String @id @default(cuid())

  placements Placement[]
  companyId String
  company   Company @relation(fields: [companyId], references: [id])
  package   String
}

model Year {
  id String @id @default(cuid())

  year       String
  companies  Company[]   @relation("CompanyYear")
  placements Placement[] @relation("PlacementYear")
}
